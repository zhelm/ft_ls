LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include <dirent.h>
     https://stackoverflow.com/questions/49392870/c-programming-directory-name-from-dir-struct

     struct dirent {
          /* Always zero */
          long d_ino;

          /* File position within stream */
          long d_off;

          /* Structure size */
          unsigned short d_reclen;

          /* Length of name without \0 */
          size_t d_namlen;

         /* File type */
          int d_type;

         /* File name */
         char d_name[PATH_MAX+1];
};

    DIR		*opendir(const char *filename);
	
     The opendir() function opens the directory named by filename, associates a directory stream
    with it and returns a pointer to be used to identify the directory stream in subsequent
    operations.  The pointer NULL is returned if filename cannot be accessed, or if it cannot
    malloc(3) enough memory to hold the whole thing, and sets the global variable errno to
    indicate the error.


	int		readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);

	The readdir() function returns a pointer to the next directory entry.  It returns NULL upon
    reaching the end of the directory or on error.  In the event of an error, errno may be set
    to any of the values documented for the getdirentries(2) system call.  Note that the order
    of the directory entries vended by readdir() is not specified. Some filesystems may return
    entries in lexicographic sort order and others may not.

	int		closedir(DIR *dirp);

	The closedir() function closes the named directory stream and frees the structure associ-
    ated with the dirp pointer, returning 0 on success.  On failure, -1 is returned and the
    global variable errno is set to indicate the error.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS	
	 #include <sys/stat.h>

	int	stat(const char *restrict path, struct stat *restrict buf);

	The stat() function obtains information about the file pointed to by path.  Read, write or
    execute permission of the named file is not required, but all directories listed in the
    path name leading to the file must be searchable.
     
     https://linuxhint.com/stat-system-call-linux/

     struct stat { /* when _DARWIN_FEATURE_64_BIT_INODE is NOT defined */
         dev_t    st_dev;    /* device inode resides on */
         ino_t    st_ino;    /* inode's number */
         mode_t   st_mode;   /* inode protection mode */
         nlink_t  st_nlink;  /* number of hard links to the file */
         uid_t    st_uid;    /* user-id of owner */
         gid_t    st_gid;    /* group-id of owner */
         dev_t    st_rdev;   /* device type, for special file inode */
         struct timespec st_atimespec;  /* time of last access */
         struct timespec st_mtimespec;  /* time of last data modification */
         struct timespec st_ctimespec;  /* time of last file status change */
         off_t    st_size;   /* file size, in bytes */
         quad_t   st_blocks; /* blocks allocated for file */
         u_long   st_blksize;/* optimal file sys I/O ops blocksize */
         u_long   st_flags;  /* user defined flags for file */
         u_long   st_gen;    /* file generation number */
     };
     https://askubuntu.com/questions/423675/why-do-octal-permissions-start-with-40 
     https://devanswers.co/linux-permissions-table-guide/

	int	lstat(const char *restrict path, struct stat *restrict buf);

	The lstat() function is like stat() except in the case where the named file is a symbolic
    link; lstat() returns information about the link, while stat() returns information about
    the file the link references.  For symbolic links, the st_mode member contains meaningful
    information when used with the file type macros, and the st_size member contains the length
    of the pathname contained in the symbolic link. File mode bits and the contents of the
    remaining members of the stat structure are unspecified. The value returned in the st_size
    member is the length of the contents of the symbolic link, and does not count any trailing
    null.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <sys/types.h>
     #include <pwd.h>
     #include <uuid/uuid.h>

	 struct passwd		*getpwuid(uid_t uid);

	 DESCRIPTION
     These functions obtain information from opendirectoryd(8), including records in
     /etc/master.passwd which is described in master.passwd(5).  Each entry in the database is
     defined by the structure passwd found in the include file <pwd.h>:

           struct passwd {
                   char    *pw_name;       /* user name */
                   char    *pw_passwd;     /* encrypted password */
                   uid_t   pw_uid;         /* user uid */
                   gid_t   pw_gid;         /* user gid */
                   time_t  pw_change;      /* password change time */
                   char    *pw_class;      /* user access class */
                   char    *pw_gecos;      /* Honeywell login info */
                   char    *pw_dir;        /* home directory */
                   char    *pw_shell;      /* default shell */
                   time_t  pw_expire;      /* account expiration */
                   int     pw_fields;      /* internal: fields filled in */
           };

	The functions getpwnam(), getpwuid(), and getpwuuid() search the password database for the
    given login name, user uid, or user uuid respectively, always returning the first one
    encountered

	The functions getpwent(), getpwnam(), getpwuid(), and getpwuuid() return a valid pointer to
    a passwd structure on success or NULL if the entry is not found or if an error occurs.  If
    an error does occur, errno will be set.  Note that programs must explicitly set errno to
    zero before calling any of these functions if they need to distinguish between a non-exis-
    tent entry and an error.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <grp.h>
     #include <uuid/uuid.h>

	 struct group	*getgrgid(gid_t gid);

	 DESCRIPTION
     These functions obtain information from opendirectoryd(8), including records in /etc/group
     which is described in group(5).  Each line of the database is defined by the structure
     group found in the include file <grp.h>:

           struct group {
                   char    *gr_name;       /* group name */
                   char    *gr_passwd;     /* group password */
                   gid_t   gr_gid;         /* group id */
                   char    **gr_mem;       /* group members */
           };

     The functions getgrnam(), getgrgid(), and getgruuid() search the group database for the
     given group name pointed to by name, the group id given by gid, or the UUID given by uuid
     respectively, returning the first one encountered.  Identical group names, group gids, or
     uuids may result in undefined behavior.

	 The functions getgrent(), getgrnam(), and getgrgid(), return a pointer to a group structure
     on success or NULL if the entry is not found or if an error occurs.  If an error does
     occur, errno will be set.  Note that programs must explicitly set errno to zero before
     calling any of these functions if they need to distinguish between a non-existent entry and
     an error.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <sys/xattr.h>

     ssize_t	listxattr(const char *path, char *namebuf, size_t size, int options);

	DESCRIPTION

     Extended attributes extend the basic attributes associated with files and directories in
     the file system.  They are stored as name:data pairs associated with file system objects
     (files, directories, symlinks, etc).

     listxattr() retrieves a list of names of extended attributes associated with the given path
     in the file system.

     namebuf is a data buffer of size bytes for the names of the extended attributes associated
     with path.  The extended attribute names are simple NULL-terminated UTF-8 strings and are
     returned in arbitrary order.  No extra padding is provided between names in the buffer.
     The list will only include names of extended attributes to which the calling process has
     access.  The function returns the size of the list of names.

     options controls how the attribute list is generated:

     XATTR_NOFOLLOW  do not follow symbolic links.  listxattr() normally lists attributes of the
                     target of path if it is a symbolic link.  With this option, listxattr()
                     will list attributes of the link itself.

     XATTR_SHOWCOMPRESSION
                     listxattr() and flistxattr() will list HFS Plus Compression extended
                     attribute(s) (if present) for the file referred to by path or fd.

     If namebuf is set to NULL, the function returns the size of the list of extended attribute
     names.  This facility can be used to determine the size of a buffer sufficiently large to
     hold the names of the attributes currently associated with path.

	 On success, the size of the extended attribute name list is returned.  If no accessible
     extended attributes are associated with the given path or fd, the function returns zero.
     On failure, -1 is returned and the global variable errno is set as follows.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <sys/xattr.h>

     ssize_t	getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options);

	 DESCRIPTION

     Extended attributes extend the basic attributes of files and directories in the file sys-
     tem.  They are stored as name:data pairs associated with file system objects (files, direc-
     tories, symlinks, etc).

     The getxattr() function retrieves up to size bytes of data from the extended attribute
     identified by name associated with path into the pre-allocated buffer pointed to by value.
     The function returns the number of bytes of data retrieved.

     An extended attribute's name is a simple NULL-terminated UTF-8 string.  position specifies
     an offset within the extended attribute.  In the current implementation, this argument is
     only used with the resource fork attribute.  For all other extended attributes, this param-
     eter is reserved and should be zero.

     On success, value contains the data associated with name.  When value is set to NULL,
     getxattr() returns current size of the named attribute.  This facility can be used to
     determine the size of a buffer sufficiently large to hold the data currently associated
     with the attribute.

     options specify options for retrieving extended attributes:

     XATTR_NOFOLLOW  do not follow symbolic links.  getxattr() normally returns information from
                     the target of path if it is a symbolic link.  With this option, getxattr()
                     will return extended attribute data from the symbolic link instead.

     XATTR_SHOWCOMPRESSION
                     getxattr() and fgetxattr() will return HFS Plus Compression extended
                     attribute name (if present) for the file referred to by path or fd.

     fgetxattr() is identical to getxattr(), except that it retrieves extended attribute data
     from the open file referenced by the file descriptor fd.

	 On success, the size of the extended attribute data is returned.  On failure, -1 is
     returned and the global variable errno is set as follows.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <time.h>

     time_t		time(time_t *tloc);
	
	DESCRIPTION

     The time() function returns the value of time in seconds since 0 hours, 0 minutes, 0 seconds, January 1,
     1970, Coordinated Universal Time, without including leap seconds.  If an error occurs, time() returns the
     value (time_t)-1.

     The return value is also stored in *tloc, provided that tloc is non-null.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <time.h>

	 char	*ctime(const time_t *clock);
	
	DESCRIPTION

     The functions ctime(), gmtime(), and localtime() all take as an argument a time value representing the time
     in seconds since the Epoch (00:00:00 UTC, January 1, 1970; see time(3)).  When encountering an error, these
     functions return NULL and set errno to an appropriate value.

	 The ctime() function adjusts the time value for the current time zone, in the same manner as localtime().
     It returns a pointer to a 26-character string of the form:

           Thu Nov 24 18:22:48 1986\n\0

     All of the fields have constant width.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <unistd.h>

     ssize_t	readlink(const char *restrict path, char *restrict buf, size_t bufsize);

	DESCRIPTION

     readlink() places the contents of the symbolic link path in the buffer buf, which has size bufsize.
     Readlink does not append a NUL character to buf.

	 The call returns the count of characters placed in the buffer if it succeeds, or a -1 if an error occurs,
     placing the error code in the global variable errno.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <stdio.h>

     void	perror(const char *s);

	 The strerror(), strerror_r(), and perror() functions look up the error message string corresponding to an
     error number.
	 
	 The perror() function finds the error message corresponding to the current value of the global variable
     errno (intro(2)) and writes it, followed by a newline, to the standard error file descriptor.  If the argu-
     ment s is non-NULL and does not point to the null character, this string is prepended to the message string
     and separated from it by a colon and space (``: ''); otherwise, only the error message string is printed.

	 
	 char	*strerror(int errnum);

	 The strerror() function accepts an error number argument errnum and returns a pointer to the corresponding
     message string.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     #include <stdlib.h>

     void	exit(int status);

	 DESCRIPTION

     The exit() and _Exit() functions terminate a process.

     Before termination, exit() performs the following functions in the order listed:

           1.   Call the functions registered with the atexit(3) function, in the reverse order of their regis-
                tration.

           2.   Flush all open output streams.

           3.   Close all open streams.

           4.   Unlink all files created with the tmpfile(3) function.

	 Note that exit() does nothing to prevent bottomless recursion should a function registered using atexit(3)
     itself call exit().  Such functions must call _Exit() instead (although this has other effects as well
     which may not be desired).

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SYNOPSIS
     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]

     DESCRIPTION
     For each operand that names a file of a type other than directory, ls displays its name as well as any requested, associated information.  For each operand that names a file of type direc-
     tory, ls displays the names of files contained within that directory, as well as any requested, associated information.

     If no operands are given, the contents of the current directory are displayed.  If more than one operand is given, non-directory operands are displayed first; directory and non-directory op-
     erands are sorted separately and in lexicographical order.

     Mandatory :

          -l      (The lowercase letter ``ell''.)  List in long format.  (See below.)  If the output is to a terminal, a total sum for all the file sizes is output on a line before the long listing.
          -a      Include directory entries whose names begin with a dot (.).
          -t      Sort by time modified (most recently modified first) before sorting the operands by lexicographical order.
          -r      Reverse the order of the sort to get reverse lexicographical order or the oldest entries first (or largest files last, if combined with sort by size
          -R      Recursively list subdirectories encountered.

     Bonus :

          -Management of ACL and extended attributes.
          -Management of the columns without the option -l. (man 4 tty)
          -Management of options -u, -f, -g, -d, ...
          -Management of views in colors (Similar to option -G)
          -Optimization of your code (What is the response time of your ls on a BIG ls -lR for example?)

     There are more to do just look for them;

     For ls -l

     The Long Format
     If the -l option is given, the following information is displayed for each file: file mode, number of links, owner name, group name, number of bytes in the file, abbreviated month, day-of-
     month file was last modified, hour file last modified, minute file last modified, and the pathname.  In addition, for each directory whose contents are displayed, the total number of
     512-byte blocks used by the files in the directory is displayed on a line by itself, immediately before the information for the files in the directory.  If the file or directory has extended
     attributes, the permissions field printed by the -l option is followed by a '@' character.  Otherwise, if the file or directory has extended security information (such as an access control
     list), the permissions field printed by the -l option is followed by a '+' character.

     If the modification time of the file is more than 6 months in the past or future, then the year of the last modification is displayed in place of the hour and minute fields.

     If the owner or group names are not a known user or group name, or the -n option is given, the numeric ID's are displayed.

     If the file is a character special or block special file, the major and minor device numbers for the file are displayed in the size field.  If the file is a symbolic link, the pathname of
     the linked-to file is preceded by ``->''.

     The file mode printed under the -l option consists of the entry type, owner permissions, and group permissions.  The entry type character describes the type of file, as follows:

           b     Block special file.
           c     Character special file.
           d     Directory.
           l     Symbolic link.
           s     Socket link.
           p     FIFO.
           -     Regular file.

     The next three fields are three characters each: owner permissions, group permissions, and other permissions.  Each field has three character positions:

           1.   If r, the file is readable; if -, it is not readable.

           2.   If w, the file is writable; if -, it is not writable.

           3.   The first of the following that applies:

                      S     If in the owner permissions, the file is not executable and set-user-ID mode is set.  If in the group permissions, the file is not executable and set-group-ID mode is
                            set.

                      s     If in the owner permissions, the file is executable and set-user-ID mode is set.  If in the group permissions, the file is executable and setgroup-ID mode is set.

                      x     The file is executable or the directory is searchable.

                      -     The file is neither readable, writable, executable, nor set-user-ID nor set-group-ID mode, nor sticky.  (See below.)

                These next two apply only to the third character in the last group (other permissions).

                      T     The sticky bit is set (mode 1000), but not execute or search permission.  (See chmod(1) or sticky(8).)

                      t     The sticky bit is set (mode 1000), and is searchable or executable.  (See chmod(1) or sticky(8).)     